#include <iostream>
#include <string>
using namespace std;

// üß± L·ªõp c∆° s·ªü (Base class): ConNguoi
class ConNguoi {
protected:
    string hoTen;
    int tuoi;

public:
    // Constructor
    ConNguoi(string ten, int t) : hoTen(ten), tuoi(t) {}

    // H√†m ·∫£o (virtual) ƒë·ªÉ th·ªÉ hi·ªán ƒëa h√¨nh
    virtual void HienThiThongTin() {
        cout << "Ho ten: " << hoTen << ", Tuoi: " << tuoi << endl;
    }

    // Destructor ·∫£o (quan tr·ªçng khi k·∫ø th·ª´a)
    virtual ~ConNguoi() {}
};

// üå≥ L·ªõp d·∫´n xu·∫•t (Derived class): SinhVien k·∫ø th·ª´a ConNguoi
class SinhVien : public ConNguoi {
private:
    string maSV;
    float diemTB;

public:
    SinhVien(string ten, int t, string ma, float diem)
        : ConNguoi(ten, t), maSV(ma), diemTB(diem) {}

    void HienThiThongTin() override { // Ghi ƒë√® (Overriding)
        cout << "[Sinh Vien] " << hoTen << " - Ma SV: " << maSV
             << ", Tuoi: " << tuoi << ", Diem TB: " << diemTB << endl;
    }
};

// üå≥ L·ªõp d·∫´n xu·∫•t kh√°c: GiangVien k·∫ø th·ª´a ConNguoi
class GiangVien : public ConNguoi {
private:
    string maGV;
    string monDay;

public:
    GiangVien(string ten, int t, string ma, string mon)
        : ConNguoi(ten, t), maGV(ma), monDay(mon) {}

    void HienThiThongTin() override {
        cout << "[Giang Vien] " << hoTen << " - Ma GV: " << maGV
             << ", Tuoi: " << tuoi << ", Mon day: " << monDay << endl;
    }
};

// üåÄ H√†m main th·ªÉ hi·ªán t√≠nh ƒëa h√¨nh
int main() {
    ConNguoi* ds[2]; // M·∫£ng con tr·ªè ki·ªÉu l·ªõp cha

    ds[0] = new SinhVien("Ha Khai Hoan", 21, "SV001", 8.9);
    ds[1] = new GiangVien("Nguyen Van A", 40, "GV001", "Lap trinh C++");

    cout << "=== Danh sach thong tin ===" << endl;
    for (int i = 0; i < 2; i++) {
        ds[i]->HienThiThongTin(); // G·ªçi h√†m ph√π h·ª£p d·ª±a v√†o ki·ªÉu th·ª±c t·∫ø
    }

    // Gi·∫£i ph√≥ng b·ªô nh·ªõ
    for (int i = 0; i < 2; i++) delete ds[i];

    return 0;
}
